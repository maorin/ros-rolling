import rclpy
from rclpy.node import Node
import cv2
import numpy as np
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import subprocess
import os
import sys
from ultralytics import YOLO  # 使用YOLOv8替代Darknet

from lane_msg.msg import Detection


class ScrcpyPublisher(Node):
    def __init__(self):
        super().__init__('scrcpy_publisher')
        self.publisher_ = self.create_publisher(Image, 'scrcpy_image', 10)
        self.detection_publisher_ = self.create_publisher(Detection, 'detections', 10)
        self.bridge = CvBridge()

        # 加载YOLOv8模型
        self.model = YOLO('yolov8n.pt')  # 使用YOLOv8 nano模型
        self.get_logger().info('已加载YOLOv8模型')
        
        # 配置检测参数
        self.conf_threshold = 0.5  # 置信度阈值
        self.device = 'cpu'  # 在CPU上运行

    def create_v4l2_device(self):
        # Check if v4l2loopback module is loaded
        module_loaded = subprocess.run(["lsmod"], capture_output=True, text=True)
        if "v4l2loopback" not in module_loaded.stdout:
            print("v4l2loopback kernel module not loaded. Loading now...")
            subprocess.run(["sudo", "modprobe", "v4l2loopback"])
    
        # Check if a v4l2loopback device already exists
        list_devices = subprocess.run(["v4l2-ctl", "--list-devices"], capture_output=True, text=True)
        video_device = None
        for line in list_devices.stdout.splitlines():
            if "Dummy video device" in line:
                video_device = subprocess.run(["v4l2-ctl", "--list-ctrls", "--device", line.split("(")[-1].strip(")")], capture_output=True, text=True)
                for sub_line in video_device.stdout.splitlines():
                    if "index" in sub_line:
                        index = int(sub_line.split("=")[-1])
                        video_device = f"/dev/video{index}"
                        break
                break
    
        # If no v4l2loopback device is found, create one
        if not video_device:
            print("No v4l2loopback device found. Creating one now...")
    
            # Find the first available video device
            for i in range(10):
                device = f"/dev/video{i}"
                if os.path.exists(device):
                    try:
                        cap = cv2.VideoCapture(device)
                        if not cap.isOpened():
                            video_device = device
                            break
                    finally:
                        cap.release()
    
        if not video_device:
            print("No available video device found.")
            sys.exit(1)
    
        return video_device

    def capture_and_publish(self):
        
        video_device = self.create_v4l2_device()
        print("使用视频设备：%s" % video_device)
    
        # 在后台启动scrcpy
        scrcpy_process = subprocess.Popen(["scrcpy", f"-m", f"800", f"--no-display", f"--v4l2-sink=/dev/video0"])
        
        # 打开虚拟视频设备
        cap = cv2.VideoCapture('/dev/video0')

        self.get_logger().info('开始捕获和发布视频流')

        frame_counter = 0
        while rclpy.ok():
            # 从视频设备捕获帧
            ret, frame = cap.read()

            if ret:
                frame_counter += 1
                if frame_counter % 5 == 0:  # 每5帧处理一次，可以根据性能调整
                    # 使用YOLOv8进行目标检测
                    results = self.model(frame, conf=self.conf_threshold, device=self.device)
                    
                    # 处理检测结果
                    for result in results:
                        boxes = result.boxes
                        for box in boxes:
                            # 获取边界框坐标
                            x1, y1, x2, y2 = box.xyxy[0].tolist()
                            conf = float(box.conf[0])
                            cls = int(box.cls[0])
                            cls_name = self.model.names[cls]
                            
                            # 创建检测消息
                            detection = Detection()
                            detection.class_name = cls_name
                            detection.confidence = conf
                            detection.x = (x1 + x2) / 2  # 中心点x坐标
                            detection.y = (y1 + y2) / 2  # 中心点y坐标
                            detection.width = x2 - x1
                            detection.height = y2 - y1
                            
                            if detection.class_name == "person" and detection.confidence > 0.8:
                                self.get_logger().info(f'检测到人: conf={detection.confidence:.2f}, x={detection.x:.1f}, y={detection.y:.1f}')
                                
                                # 发布检测结果
                                self.detection_publisher_.publish(detection)
                                
                                # 将OpenCV图像转换为ROS2图像消息并发布
                                ros_image = self.bridge.cv2_to_imgmsg(frame, "bgr8")
                                self.publisher_.publish(ros_image)

            else:
                self.get_logger().error("无法读取视频帧")
                break

        # 关闭资源
        cv2.destroyAllWindows()
        cap.release()
        
        # 停止scrcpy进程
        scrcpy_process.terminate()
        self.get_logger().info('已停止视频捕获')

def main(args=None):
    rclpy.init(args=args)
    scrcpy_publisher = ScrcpyPublisher()
    scrcpy_publisher.capture_and_publish()
    scrcpy_publisher.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
